- Rename `Group::order()` to `size`?
- The constructors for Dihedral and Dicyclic should throw exceptions when
  passed 0 or 1
- The constructor for Cyclic should throw an exception when passed 0
- quaternion() should throw an exception when given an invalid argument
- Rethink the memory management of Group objects passed to Direct's constructor
- Protect elem and gelem<T> objects from being used directly by unwanted code
- Make the names of the methods for constructing arbitrary elements (currently
  Cyclic::residue and Direct::pair) consistent
- Rethink the way Element manages its Group*
- Could the creation of Group subclasses be simplified using templates and/or
  std::function somehow?
- Add a "group_mismatch" exception
- Create a "smart pointer" container around Group* for general external use, Ã 
  la `Element` with `elem`?
- Rename "abelian" to "isAbelian"?
- Give Tabular a `Tabular(const Group*)` constructor that uses/emulates either
  the `Tabular(const Group&)` or `Tabular(const Tabular&)` constructor
  depending on what type the pointer points to

FEATURES
- Implement all of the features in plan.txt
- Types of groups to implement:
 - the trivial group
 - Klein 4-group
 - semidirect products
 - alternating groups
 - permutation groups
 - multiplication modulo n?
- Operations to add:
 - calculating group tables
 - calculating centralizers & centers
 - calculating normalizers
 - determining all subgroups of a group
 - determining whether a subgroup is normal
 - calculating nilpotence classes
 - calculating conjugacy classes
 - calculating all abelian groups of a given order
 - determining whether a group is abelian
 - calculating lower central series
- Add methods for configuring how to display the elements of a group:
 - setting the strings to display for generators and the identity
 - setting whether cyclic groups should use the notation $x^a$, $a$, $\bar{a}$,
   or $[a]_n$
 - setting whether direct product groups should use pair notation or just
   concatenate the element strings
  - when pair notation is used, setting whether elements of component direct
    product groups should be "flattened" or not (e.g., "((a, b), c)" vs. "(a,
    b, c)")
 - setting whether to display operations/combinations of generators additively
   or multiplicatively
 - setting whether to give $ab=c\in V_4$ and $ij=k\in Q_8$ separate symbols
   (and, if so, which ones) or to represent them as combinations of generators
 - setting what order to display factors of elements of semidirect products in
   (including elements of dihedral and dicyclic groups)
 - setting how to display i^n = j^2 in dicyclic groups
- Add a way for the user to create abitrary elements of a Dicyclic, Dihedral,
  Symmetric, or Tabular group
- Add an alternative to/replacement for quaternion() that takes the cardinality
  of the desired group?
- Add closure functions that send their output to supplied output iterators?
- Specialize C++11's `hash<T>` for Permutation.cpp?
- Add methods for showing names of groups
- Give the various `group` subclasses getters for their constructor values
