- Document everything!
- Add a header file that re-exports all of the other header files
- Possible coding changes:
 - Rename `basic_group::order()` to `size`?
 - Rename "abelian" to "isAbelian"?
 - Rethink the memory management of basic_group objects passed to Direct's
   constructor
 - Rethink the way Element manages its Group*
 - Should Direct take the types of its component groups rather than their
   elements as its template parameters? (e.g., `Direct<Cyclic, Symmetric>`
   rather than `Direct<int, Permutation>`)
 - Should quaternion() return `Dicyclic` instead of `Dicyclic*`?
 - Should `order` (both kinds) and `indexElem` return `size_t`s instead of
   `int`s?
 - Should internal functions be placed in a `Groups::internals` namespace in
   order to avoid accidental/excessive pollution by `using namespace Groups;`?
- Could the creation of basic_group subclasses be simplified using templates
  and/or std::function somehow?
- Figure out a way to generalize the implementations of the
  `cmp(basic_group<T>*)` methods into a superclass
- Create a "smart pointer" container around basic_group<T>* for general
  external use?
- Requirements to try to codify & enforce among all basic_group<T> subclasses:
 - elements() should always return a sorted vector.
 - The identity should always be the first element of elements().
 - indexElem() should return an element's index in the elements() vector.
- Implement move constructors & move assignment

FEATURES
- Implement all of the features in plan.txt
- Types of groups to implement:
 - semidirect products
 - alternating groups
 - permutation groups
- Operations to add:
 * calculating centralizers & centers
 * calculating normalizers
 * determining all subgroups of a group
 * determining whether a subgroup is normal
 * calculating nilpotence classes
 * calculating conjugacy classes
 * calculating lower central series
 - calculating all abelian groups of a given order
 - calculating left & right cosets of groups
- Add methods for configuring how to display the elements of a group:
 - setting the strings to display for generators and the identity
 - setting whether cyclic groups should use the notation $x^a$, $a$, $\bar{a}$,
   or $[a]_n$
 - setting whether direct product groups should use pair notation or just
   concatenate the element strings
  - when pair notation is used, setting whether elements of component direct
    product groups should be "flattened" or not (e.g., "((a, b), c)" vs. "(a,
    b, c)")
 - setting whether to display operations/combinations of generators additively
   or multiplicatively
 - setting whether to give $ab=c\in V_4$ and $ij=k\in Q_8$ separate symbols
   (and, if so, which ones) or to represent them as combinations of generators
 - setting what order to display factors of elements of semidirect products in
   (including elements of dihedral and dicyclic groups)
 - setting how to display i^n = j^2 in dicyclic groups
- Add an alternative to/replacement for quaternion() that takes the cardinality
  of the desired group?
- Specialize C++11's `hash<T>` for Permutation.cpp?
- Add methods for showing names of groups
- Add a basic_element<basic_group<T>, T> class with multiplication et alii
  methods?
- Add an `isSubset(set<T>, basic_group<T>)` function?
- Add an easy way to convert element values from T to Element and back again
 - Give `Element` an `Element(const basic_group<T>&, const T&)` constructor?
- Give `Group` a `Group(const basic_group<T>*)` constructor that uses/emulates
  either the `Group(const basic_group<T>&)` or `Group(const Group&)`
  constructor depending on what type the pointer points to
