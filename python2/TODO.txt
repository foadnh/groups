- Document everything!
- Handle all of the sections marked "TODO" in the code
- Implement permutation groups? (or just use subgroups of Symmetric)
- Implement configurable element showing
- Add a way to set an individual group's __str__, __unicode__, & LaTeX values?
 - subgroups returned by `generate` should have their name be "⟨elements of
   generating set⟩"
- Should .oper (and other group methods?) raise a TypeError/ValueError when
  given values outside the group?
- permutation.py: Make fewer things properties?
- Rename `group` to `basic_group`?
- Rename `DirectProduct` to `Direct`?
- Add support to groups/read.py for:
 - semidirect products
 - "Z/nZ" notation for Cyclic
 - "Aut(Z_n)" (and "Aut(Z/nZ)") notation for AutCyclic
 - HolCyclic
 - CycSemiCyc
 - subgroups
- Make DirectProduct's (and Semidirect's?) `showElem` family "flatten" elements
  -- e.g., writing "(a,b,c)" instead of "((a,b),c)"
- Make DirectProduct's `__str__` etc. "flatten" their output -- e.g., writing
  "Z_2 * Z_3 * Z_4" instead of "(Z_2 * Z_3) * Z_4"
- Implement pickling methods?
- Make the subclasses of `group` (other than `subgroup` and `Group`) redefine
  `exponent`?
- Make groups/about.py calculate/output the following:
 - automorphisms that elements induce by conjugation
 - commutators?
 - maximal subgroups?
 - maximal subgroups of each subgroup?
 - cosets of subgroups?
 - abelianity of subgroups?
 - normal subgroups within subgroups?
 - the Cayley table?
- Add a LaTeX version of the `cayley` method
- Give cayley.py switches for setting the output format (plain ASCII, Unicode,
  and eventually LaTeX)
