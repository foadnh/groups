- Document everything!
- Handle all of the sections marked "TODO" in the code
- Implement all of the features in plan.txt
 - Features that the Python version is behind on:
  - alternating groups
  - permutation groups
  - "boolean" group?
  - testing whether a group is abelian
  - calculating centralizers, centers, and normalizers
  - calculating all subgroups of a group
  - determining whether a subgroup is normal
  - calculating nilpotence classes
  - calculating conjugacy classes
  - a "tabular" group
- Implement configurable element showing
- Implement Element construction of the form `Element(paramTuple, group)`
  (where Element is the base class rather than a group's derived class) ?
- Add __copy__ and __deepcopy__ methods (see the `copy` module)
 - Add Element.copy()
- Implement an inverse method to `indexElem`?
- Make `identity` a property?
- Rewrite Group.__contains__ and/or Group.elem to ensure that the Element
  objects in question actually appear in their respective Groups?  cf. the
  overloading of .elem by Cyclic
- Should .oper (and other Group methods?) raise a TypeError when given Elements
  outside the Group?
- Should Element.order and/or Element.index cache their results?
- permutation.py: Make fewer things properties?
- Idea: Further cut down on boilerplate by writing group methods as though the
  element types were their "natural" types (ints for Cyclic, (bool,int) pair
  for Dihedral, etc.) and having Metagroup define the actual methods as
  wrappers around those
