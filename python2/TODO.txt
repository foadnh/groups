- Document everything!
- Implement the following:
 - alternating groups
 - "boolean" group?
 - calculating all subgroups of a group
 - testing whether a group is abelian
 - calculating nilpotence classes
 - configurable element showing
 - __copy__ and __deepcopy__ methods (see the `copy` module)
  - Element.copy()
 - an inverse method to `indexElem`?
 - Element construction of the form `Element(paramTuple, group)` (where Element
   is the base class rather than a group's derived class) ?
 - permutation.py: Converting from Lehmer codes to Permutations
- Make `identity` a property?
- Rewrite Group.__contains__ and/or Group.elem to ensure that the Element
  objects in question actually appear in their respective Groups?  cf. the
  overloading of .elem by Cyclic
- Should .oper (and other Group methods?) raise a TypeError when given Elements
  outside the Group?
- Should Element.order and/or Element.index cache their results?
- permutation.py: Add an `identity` classmethod to further keep users away from
  the constructor?
