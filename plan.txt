The following is a list of all features that I desire/plan to implement in this
library.  Those marked with an asterisk are currently already implemented in at
least one language.

* There must exist a single type G (i.e., not a type of the form `T a` where
  `a` is a type variable) for representing all possible isomorphism types of
  finite groups (not necessarily uniquely).
- Calculating the following must be possible for all groups & elements thereof:
 * group identity
 * element multiplication
 * inversion
 * order of a group
 * order of an element
 * all powers of an element
 * all elements of a group
 * whether an element is in a group
 * whether a group is abelian
 * closures of subsets
 * centralizers, centers, and normalizers
 * subgroups of a group
 * whether a subgroup is normal
 - whether a subgroup is characteristic
 - automorphisms and groups thereof
 - whether two groups are isomorphic
 - commutators
 - commutator subgroup
 * lower central series
 - upper central series
 * nilpotence class
 - whether a group is solvable
 - whether a group is simple
 - generating set-rank of a group
 - exponent of a group
 * conjugacy classes
 - cosets
 - decompositions of elements into products of elements of a given generating
   set?
 - Thompson subgroup
- Types of groups to implement:
 * trivial group
 * Klein 4-group
 * cyclic groups
 * multiplication modulo n
 * dihedral groups
  - generalized dihedral groups
 * dicyclic groups
  * generalized quaternion groups
   * quaternion group
 * direct products
 * semidirect products
 * symmetric groups
 * alternating groups
 * permutation groups
 - quotient groups
 - automorphism groups
 - holomorphs
 - wreath products
 - elementary abelian groups
 - subgroups of other groups
- It should be possible to "deconstruct" any group to obtain its family
  (cyclic, dicyclic, semidirect product of G and H, etc.) and any values used
  to construct it (e.g., order for cyclic groups, homomorphism for semidirect
  products).
* Given a group object, it should be possible to construct an arbitrary element
  of that group from one or more values of types specific to the group's
  family.
- It should be possible to "deconstruct" any element to obtain the
  family-specific values used to construct it.
- There should exist a type for representing group homomorphisms -- and *only*
  valid homomorphisms.
- It should be possible, given a group, to convert any element thereof to a
  human-readable string representation with the ability to configure the
  representations of the group's generators.
